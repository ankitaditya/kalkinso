{"version":3,"file":"static/js/909.a86630db.chunk.js","mappings":"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","sources":["../node_modules/is-buffer/index.js","../node_modules/@blocknote/core/node_modules/is-plain-obj/index.js","../node_modules/@blocknote/core/node_modules/vfile-message/lib/index.js","../node_modules/@blocknote/core/node_modules/vfile/lib/minpath.browser.js","../node_modules/@blocknote/core/node_modules/vfile/lib/minproc.browser.js","../node_modules/@blocknote/core/node_modules/vfile/lib/minurl.shared.js","../node_modules/@blocknote/core/node_modules/vfile/lib/minurl.browser.js","../node_modules/@blocknote/core/node_modules/vfile/lib/index.js","../node_modules/@blocknote/core/node_modules/unified/lib/index.js","../node_modules/@blocknote/core/node_modules/unist-util-stringify-position/lib/index.js"],"sourcesContent":["/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > 👉 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(reason, place, origin) {\n    /** @type {[string | null, string | null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // To do: next major: deep clone.\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        // To do: next major: deep clone.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // To do: next major: deep clone.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`.\n    /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(place) || '1:1'\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = typeof reason === 'object' ? reason.message : reason\n\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * > 👉 **Note**: you should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * State of problem.\n     *\n     * * `true` — marks associated file as no longer processable (error)\n     * * `false` — necessitates a (potential) change (warning)\n     * * `null | undefined` — for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */\n    this.position = position\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */\n    this.expected\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * Check if `fileUrlOrPath` looks like a URL.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileUrlOrPath) {\n  return (\n    fileUrlOrPath !== null &&\n    typeof fileUrlOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.origin\n  )\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string | URL} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport bufferLike from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Buffer`\n   *   (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding || undefined)\n  }\n\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\nfunction buffer(value) {\n  return bufferLike(value)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n"],"names":["module","exports","obj","constructor","isBuffer","isPlainObject","value","prototype","Object","getPrototypeOf","Symbol","toStringTag","iterator","VFileMessage","Error","reason","place","origin","parts","position","start","line","column","end","super","undefined","index","indexOf","slice","this","name","stringifyPosition","message","stack","fatal","source","ruleId","file","actual","expected","url","note","path","basename","ext","TypeError","assertPath","seenNonSlash","length","charCodeAt","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","code","join","joined","_len","arguments","segments","Array","_key","normalize","sep","absolute","allowAboveRoot","lastSlashIndex","result","lastSegmentLength","lastSlash","dots","lastIndexOf","normalizeString","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","href","urlToPath","URL","error","protocol","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","order","VFile","options","bufferLike","buffer","data","messages","history","stored","map","prop","includes","assertNonEmpty","push","assertPart","stem","toString","encoding","info","fail","part","unified","base","transformers","trough","attachers","frozen","namespace","freezeIndex","processor","key","assertUnfrozen","own","call","Parser","Compiler","freeze","attacher","transformer","use","Number","POSITIVE_INFINITY","settings","addPlugin","isArray","addList","addPreset","assign","add","plugin","plugins","entry","isPlainObj","extend","parse","doc","vfile","assertParser","newable","String","node","assertCompiler","assertNode","compile","run","callback","Promise","executor","resolve","reject","done","tree","runSync","complete","assertDone","bail","process","processSync","destination","hasOwnProperty","keys","type","asyncName","Boolean","looksLikeAVFile","point","pos"],"sourceRoot":""}