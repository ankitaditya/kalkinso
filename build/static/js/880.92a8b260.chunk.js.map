{"version":3,"file":"static/js/880.92a8b260.chunk.js","mappings":"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","sources":["../node_modules/@blocknote/core/node_modules/mdast-util-to-string/lib/index.js","../node_modules/@blocknote/core/node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/@blocknote/core/node_modules/micromark-util-decode-string/index.js","../node_modules/@blocknote/core/node_modules/micromark/lib/initialize/content.js","../node_modules/@blocknote/core/node_modules/micromark/lib/initialize/document.js","../node_modules/@blocknote/core/node_modules/micromark-util-subtokenize/index.js","../node_modules/@blocknote/core/node_modules/micromark-core-commonmark/lib/content.js","../node_modules/@blocknote/core/node_modules/micromark/lib/initialize/flow.js","../node_modules/@blocknote/core/node_modules/micromark/lib/initialize/text.js","../node_modules/@blocknote/core/node_modules/micromark/lib/create-tokenizer.js","../node_modules/@blocknote/core/node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/@blocknote/core/node_modules/micromark-core-commonmark/lib/list.js","../node_modules/@blocknote/core/node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/@blocknote/core/node_modules/micromark-factory-destination/index.js","../node_modules/@blocknote/core/node_modules/micromark-factory-label/index.js","../node_modules/@blocknote/core/node_modules/micromark-factory-title/index.js","../node_modules/@blocknote/core/node_modules/micromark-factory-whitespace/index.js","../node_modules/@blocknote/core/node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/@blocknote/core/node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/@blocknote/core/node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/@blocknote/core/node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/@blocknote/core/node_modules/micromark-util-html-tag-name/index.js","../node_modules/@blocknote/core/node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/@blocknote/core/node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/@blocknote/core/node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/@blocknote/core/node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/@blocknote/core/node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/@blocknote/core/node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/@blocknote/core/node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/@blocknote/core/node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/@blocknote/core/node_modules/micromark/lib/constructs.js","../node_modules/@blocknote/core/node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/@blocknote/core/node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/@blocknote/core/node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/@blocknote/core/node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/@blocknote/core/node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/@blocknote/core/node_modules/micromark/lib/preprocess.js","../node_modules/@blocknote/core/node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/@blocknote/core/node_modules/micromark/lib/postprocess.js","../node_modules/@blocknote/core/node_modules/micromark/lib/parse.js","../node_modules/@blocknote/core/node_modules/remark-parse/lib/index.js","../node_modules/@blocknote/core/node_modules/unist-util-stringify-position/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > 126 && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) ||\n    // Noncharacters.\n    (code > 64975 && code < 65008) /* eslint-disable no-bitwise */ ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\n    // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | void}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * @this {import('unified').Processor}\n * @type {import('unified').Plugin<[Options?] | void[], string, Root>}\n */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n"],"names":["emptyOptions","toString","value","options","settings","one","includeImageAlt","includeHtml","Boolean","node","type","alt","all","children","Array","isArray","values","result","index","length","join","decodeNumericCharacterReference","base","code","Number","parseInt","String","fromCharCode","characterEscapeOrReference","decodeString","replace","decode","$0","$1","$2","charCodeAt","head","hex","slice","decodeNamedCharacterReference","content","tokenize","effects","contentStart","attempt","this","parser","constructs","contentInitial","consume","enter","exit","factorySpace","lineStart","previous","token","contentType","next","data","markdownLineEnding","document","self","stack","childFlow","childToken","lineStartOffset","continued","start","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","undefined","closeFlow","indexBeforeExits","events","point","indexBeforeFlow","end","exitContainers","Object","assign","splice","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","line","offset","containerContinue","push","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","size","entry","call","ok","nok","disable","null","includes","subtokenize","jumps","event","lineIndex","otherIndex","otherEvent","parameters","subevents","more","_isInFirstContentOfListItem","subcontent","_container","unshift","eventIndex","context","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","pop","chunkInside","contentEnd","continuationConstruct","contentContinue","resolve","prefixed","tail","sliceSerialize","partial","initial","blankLine","flowInitial","afterConstruct","resolver","resolveAll","createResolver","string","initializeFactory","text","field","notText","atBreak","list","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","column","_index","_bufferIndex","createTokenizer","initialize","from","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","info","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","expectedCode","state","startIndex","startBufferIndex","endIndex","endBufferIndex","view","shift","sliceChunks","chunkIndex","go","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","map","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","name","create","resolveTo","thematicBreak","marker","before","sequence","markdownSpace","initialSize","kind","asciiDigit","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","open","after","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","max","limit","POSITIVE_INFINITY","balance","enclosedBefore","asciiControl","raw","enclosed","enclosedEscape","markdownLineEndingOrSpace","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","definition","identifier","labelAfter","normalizeIdentifier","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","defined","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","asciiAlpha","tagName","commentOpenInside","cdataOpenInside","slash","toLowerCase","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","asciiAlphanumeric","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","characterReference","test","numeric","asciiHexDigit","characterEscape","asciiPunctuation","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","media","group","label","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","attention","attentionMarkers","classifyCharacter","_open","_close","openingSequence","closingSequence","use","nextEvents","movePoint","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","asciiAtext","emailLabel","emailValue","instruction","tagOpen","declaration","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","between","tailExitIndex","headEnterIndex","resolveText","search","own","hasOwnProperty","fromMarkdown","encoding","config","transforms","canContainEols","autolink","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeText","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreakEscape","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlText","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tree","tokenStack","resume","setData","getData","listStack","prepareList","handler","defaultOnError","position","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","key","and","errorHandler","onExitError","Error","stringifyPosition","lang","title","url","depth","referenceType","ancestor","fragment","ordered","spread","checked","compiler","postprocess","combineExtensions","defaultConstructs","extensions","parse","atCarriageReturn","match","endPosition","lastIndex","exec","Math","ceil","preprocess","d","combined","extension","right","left","remarkParse","Parser","doc","pos"],"sourceRoot":""}