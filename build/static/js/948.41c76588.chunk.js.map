{"version":3,"file":"static/js/948.41c76588.chunk.js","mappings":"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","sources":["../node_modules/@blocknote/core/node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","../node_modules/@blocknote/core/node_modules/micromark-extension-gfm-footnote/lib/syntax.js","../node_modules/@blocknote/core/node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","../node_modules/@blocknote/core/node_modules/micromark-extension-gfm-table/lib/edit-map.js","../node_modules/@blocknote/core/node_modules/micromark-extension-gfm-table/lib/infer.js","../node_modules/@blocknote/core/node_modules/micromark-extension-gfm-table/lib/syntax.js","../node_modules/@blocknote/core/node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","../node_modules/@blocknote/core/node_modules/micromark-extension-gfm/index.js","../node_modules/@blocknote/core/node_modules/mdast-util-find-and-replace/lib/index.js","../node_modules/@blocknote/core/node_modules/escape-string-regexp/index.js","../node_modules/@blocknote/core/node_modules/mdast-util-gfm-autolink-literal/lib/index.js","../node_modules/@blocknote/core/node_modules/mdast-util-gfm-footnote/lib/index.js","../node_modules/@blocknote/core/node_modules/mdast-util-gfm-strikethrough/lib/index.js","../node_modules/@blocknote/core/node_modules/mdast-util-gfm-table/lib/index.js","../node_modules/@blocknote/core/node_modules/mdast-util-gfm-task-list-item/lib/index.js","../node_modules/@blocknote/core/node_modules/mdast-util-gfm/lib/index.js","../node_modules/@blocknote/core/node_modules/remark-gfm/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiControl,\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n}\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n}\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n}\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n}\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n}\nconst wwwAutolink = {\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n}\nconst protocolAutolink = {\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n}\nconst emailAutolink = {\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n}\n\n/** @type {ConstructRecord} */\nconst text = {}\n\n// To do: next major: expose functions that yields extension.\n\n/**\n * Extension for `micromark` that can be passed in `extensions` to enable GFM\n * autolink literal syntax.\n *\n * @type {Extension}\n */\nexport const gfmAutolinkLiteral = {\n  text\n}\n\n/** @type {Code} */\nlet code = 48\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink\n  code++\n  if (code === 58) code = 65\n  else if (code === 91) code = 97\n}\ntext[43] = emailAutolink\ntext[45] = emailAutolink\ntext[46] = emailAutolink\ntext[95] = emailAutolink\ntext[72] = [emailAutolink, protocolAutolink]\ntext[104] = [emailAutolink, protocolAutolink]\ntext[87] = [emailAutolink, wwwAutolink]\ntext[119] = [emailAutolink, wwwAutolink]\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this\n  /** @type {boolean | undefined} */\n  let dot\n  /** @type {boolean} */\n  let data\n  return start\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (\n      !gfmAtext(code) ||\n      !previousEmail.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkEmail')\n    return atext(code)\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code)\n      return atext\n    }\n    if (code === 64) {\n      effects.consume(code)\n      return emailDomain\n    }\n    return nok(code)\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(\n        emailDomainDotTrail,\n        emailDomainAfter,\n        emailDomainDot\n      )(code)\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true\n      effects.consume(code)\n      return emailDomain\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code)\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code)\n    dot = true\n    return emailDomain\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail')\n      effects.exit('literalAutolink')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this\n  return wwwStart\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (\n      (code !== 87 && code !== 119) ||\n      !previousWww.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkWww')\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(\n      wwwPrefix,\n      effects.attempt(domain, effects.attempt(path, wwwAfter), nok),\n      nok\n    )(code)\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this\n  let buffer = ''\n  let seen = false\n  return protocolStart\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if (\n      (code === 72 || code === 104) &&\n      previousProtocol.call(self, self.previous) &&\n      !previousUnbalanced(self.events)\n    ) {\n      effects.enter('literalAutolink')\n      effects.enter('literalAutolinkHttp')\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase()\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code)\n        return protocolSlashesInside\n      }\n    }\n    return nok(code)\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code)\n      if (seen) {\n        return afterProtocol\n      }\n      seen = true\n      return protocolSlashesInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null ||\n      asciiControl(code) ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)\n      ? nok(code)\n      : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code)\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0\n  return wwwPrefixInside\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++\n      effects.consume(code)\n      return wwwPrefixInside\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code)\n      return wwwPrefixAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment\n  /** @type {boolean | undefined} */\n  let seen\n  return domainInside\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code)\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      (code !== 45 && unicodePunctuation(code))\n    ) {\n      return domainAfter(code)\n    }\n    seen = true\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment\n      underscoreInLastSegment = undefined\n    }\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code)\n    }\n    return ok(code)\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0\n  let sizeClose = 0\n  return pathInside\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++\n      effects.consume(code)\n      return pathInside\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code)\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 38 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 60 ||\n      code === 63 ||\n      code === 93 ||\n      code === 95 ||\n      code === 126\n    ) {\n      return effects.check(trail, ok, pathAtPunctuation)(code)\n    }\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    effects.consume(code)\n    return pathInside\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++\n    }\n    effects.consume(code)\n    return pathInside\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 63 ||\n      code === 95 ||\n      code === 126\n    ) {\n      effects.consume(code)\n      return trail\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code)\n      return trailCharRefStart\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code)\n      return trailBracketAfter\n    }\n    if (\n      // `<` is an end.\n      code === 60 ||\n      // So is whitespace.\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (\n      code === null ||\n      code === 40 ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return trail(code)\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharRefInside(code) : nok(code)\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code)\n      return trail\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return trailCharRefInside\n    }\n\n    // It’s not a trail.\n    return nok(code)\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code)\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return (\n    code === null ||\n    code === 40 ||\n    code === 42 ||\n    code === 95 ||\n    code === 91 ||\n    code === 93 ||\n    code === 126 ||\n    markdownLineEndingOrSpace(code)\n  )\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code)\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code))\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return (\n    code === 43 ||\n    code === 45 ||\n    code === 46 ||\n    code === 95 ||\n    asciiAlphanumeric(code)\n  )\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length\n  let result = false\n  while (index--) {\n    const token = events[index][1]\n    if (\n      (token.type === 'labelLink' || token.type === 'labelImage') &&\n      !token._balanced\n    ) {\n      result = true\n      break\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false\n      break\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true\n  }\n  return result\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {blankLine} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  }\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {Token} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1]\n    if (token.type === 'labelImage') {\n      labelStart = token\n      break\n    }\n\n    // Exit if we’ve walked far enough.\n    if (\n      token.type === 'gfmFootnoteCall' ||\n      token.type === 'labelLink' ||\n      token.type === 'label' ||\n      token.type === 'image' ||\n      token.type === 'link'\n    ) {\n      break\n    }\n  }\n  return start\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code)\n    }\n    const id = normalizeIdentifier(\n      self.sliceSerialize({\n        start: labelStart.end,\n        end: self.now()\n      })\n    )\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code)\n    }\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return ok(code)\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length\n  /** @type {Token | undefined} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    if (\n      events[index][1].type === 'labelImage' &&\n      events[index][0] === 'enter'\n    ) {\n      labelStart = events[index][1]\n      break\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = 'data'\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker'\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  }\n  // Increment the end 1 character.\n  marker.end.column++\n  marker.end.offset++\n  marker.end._bufferIndex++\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  }\n  /** @type {Token} */\n  const chunk = {\n    type: 'chunkString',\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  }\n\n  /** @type {Array<Event>} */\n  const replacement = [\n    // Take the `labelImageMarker` (now `data`, the `!`)\n    events[index + 1],\n    events[index + 2],\n    ['enter', call, context],\n    // The `[`\n    events[index + 3],\n    events[index + 4],\n    // The `^`.\n    ['enter', marker, context],\n    ['exit', marker, context],\n    // Everything in between.\n    ['enter', string, context],\n    ['enter', chunk, context],\n    ['exit', chunk, context],\n    ['exit', string, context],\n    // The ending (`]`, properly parsed and labelled).\n    events[events.length - 2],\n    events[events.length - 1],\n    ['exit', call, context]\n  ]\n  events.splice(index, events.length - index + 1, ...replacement)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  let size = 0\n  /** @type {boolean} */\n  let data\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall')\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return callStart\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code)\n    effects.enter('gfmFootnoteCallMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallMarker')\n    effects.enter('gfmFootnoteCallString')\n    effects.enter('chunkString').contentType = 'string'\n    return callData\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteCallString')\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code)\n      }\n      effects.enter('gfmFootnoteCallLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteCallLabelMarker')\n      effects.exit('gfmFootnoteCall')\n      return ok\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? callEscape : callData\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return callData\n    }\n    return callData(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {string} */\n  let identifier\n  let size = 0\n  /** @type {boolean | undefined} */\n  let data\n  return start\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true\n    effects.enter('gfmFootnoteDefinitionLabel')\n    effects.enter('gfmFootnoteDefinitionLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteDefinitionLabelMarker')\n    return labelAtMarker\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionMarker')\n      effects.enter('gfmFootnoteDefinitionLabelString')\n      effects.enter('chunkString').contentType = 'string'\n      return labelInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteDefinitionLabelString')\n      identifier = normalizeIdentifier(self.sliceSerialize(token))\n      effects.enter('gfmFootnoteDefinitionLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionLabelMarker')\n      effects.exit('gfmFootnoteDefinitionLabel')\n      return labelAfter\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      if (!defined.includes(identifier)) {\n        defined.push(identifier)\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(\n        effects,\n        whitespaceAfter,\n        'gfmFootnoteDefinitionWhitespace'\n      )\n    }\n    return nok(code)\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok))\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition')\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'gfmFootnoteDefinitionIndent',\n    4 + 1\n  )\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'gfmFootnoteDefinitionIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === 4\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde.\n *\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\n\nimport {splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {}\n  let single = options_.singleTilde\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  }\n  if (single === null || single === undefined) {\n    single = true\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  }\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (\n        events[index][0] === 'enter' &&\n        events[index][1].type === 'strikethroughSequenceTemporary' &&\n        events[index][1]._close\n      ) {\n        let open = index\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (\n            events[open][0] === 'exit' &&\n            events[open][1].type === 'strikethroughSequenceTemporary' &&\n            events[open][1]._open &&\n            // If the sizes are the same:\n            events[index][1].end.offset - events[index][1].start.offset ===\n              events[open][1].end.offset - events[open][1].start.offset\n          ) {\n            events[index][1].type = 'strikethroughSequence'\n            events[open][1].type = 'strikethroughSequence'\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            }\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            }\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [\n              ['enter', strikethrough, context],\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context],\n              ['enter', text, context]\n            ]\n            const insideSpan = context.parser.constructs.insideSpan.null\n            if (insideSpan) {\n              // Between.\n              splice(\n                nextEvents,\n                nextEvents.length,\n                0,\n                resolveAll(insideSpan, events.slice(open + 1, index), context)\n              )\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [\n              ['exit', text, context],\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context],\n              ['exit', strikethrough, context]\n            ])\n            splice(events, open - 1, index - open + 3, nextEvents)\n            index = open + nextEvents.length - 2\n            break\n          }\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = 'data'\n      }\n    }\n    return events\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous\n    const events = this.events\n    let size = 0\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      if (\n        previous === 126 &&\n        events[events.length - 1][1].type !== 'characterEscape'\n      ) {\n        return nok(code)\n      }\n      effects.enter('strikethroughSequenceTemporary')\n      return more(code)\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous)\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code)\n        effects.consume(code)\n        size++\n        return more\n      }\n      if (size < 2 && !single) return nok(code)\n      const token = effects.exit('strikethroughSequenceTemporary')\n      const after = classifyCharacter(code)\n      token._open = !after || (after === 2 && Boolean(before))\n      token._close = !before || (before === 2 && Boolean(after))\n      return ok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = []\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {void}\n   */\n  add(index, remove, add) {\n    addImpl(this, index, remove, add)\n  }\n\n  // To do: not used here.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {void}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImpl(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {void}\n   */\n  consume(events) {\n    this.map.sort((a, b) => a[0] - b[0])\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length\n    /** @type {Array<Array<Event>>} */\n    const vecs = []\n    while (index > 0) {\n      index -= 1\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]))\n      // eslint-disable-next-line unicorn/no-array-push-push\n      vecs.push(this.map[index][2])\n\n      // Truncate rest.\n      events.length = this.map[index][0]\n    }\n    vecs.push([...events])\n    events.length = 0\n    let slice = vecs.pop()\n    while (slice) {\n      events.push(...slice)\n      slice = vecs.pop()\n    }\n\n    // Truncate everything.\n    this.map.length = 0\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {void}\n */\nfunction addImpl(editMap, at, remove, add) {\n  let index = 0\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove\n\n      // To do: before not used.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add)\n      // }\n\n      return\n    }\n    index += 1\n  }\n  editMap.map.push([at, remove, add])\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       console.log('to do: links?', add, rmCurr)\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @typedef {'left' | 'center' | 'right' | 'none'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Array<Event>} events\n * @param {number} index\n * @returns {Array<Align>}\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false\n  /** @type {Array<Align>} */\n  const align = []\n  while (index < events.length) {\n    const event = events[index]\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(\n            events[index + 1][1].type === 'tableDelimiterMarker'\n              ? 'left'\n              : 'none'\n          )\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right'\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true\n    }\n    index += 1\n  }\n  return align\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {EditMap} from './edit-map.js'\nimport {gfmTableAlign} from './infer.js'\n\n// To do: next major: expose functions.\n\n/**\n * Extension for `micromark` that can be passed in `extensions` to enable GFM\n * table syntax.\n *\n * @type {Extension}\n */\nexport const gfmTable = {\n  flow: {\n    null: {\n      tokenize: tokenizeTable,\n      resolveAll: resolveTable\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this\n  let size = 0\n  let sizeB = 0\n  /** @type {boolean | undefined} */\n  let seen\n  return start\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1\n    while (index > -1) {\n      const type = self.events[index][1].type\n      if (\n        type === 'lineEnding' ||\n        // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n        type === 'linePrefix'\n      )\n        index--\n      else break\n    }\n    const tail = index > -1 ? self.events[index][1].type : null\n    const next =\n      tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    return next(code)\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead')\n    effects.enter('tableRow')\n    return headRowStart(code)\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code)\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1\n    return headRowBreak(code)\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true\n        effects.exit('tableRow')\n        effects.enter('lineEnding')\n        effects.consume(code)\n        effects.exit('lineEnding')\n        return headDelimiterStart\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, 'whitespace')(code)\n    }\n    sizeB += 1\n    if (seen) {\n      seen = false\n      // Header cell count.\n      size += 1\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      // Whether a delimiter was seen.\n      seen = true\n      return headRowBreak\n    }\n\n    // Anything else is cell data.\n    effects.enter('data')\n    return headRowData(code)\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return headRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? headRowEscape : headRowData\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return headRowData\n    }\n    return headRowData(code)\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    effects.enter('tableDelimiterRow')\n    // Track if we’ve seen a `:` or `|`.\n    seen = false\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        headDelimiterBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return headDelimiterBefore(code)\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code)\n    }\n    if (code === 124) {\n      seen = true\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return headDelimiterCellBefore\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, 'whitespace')(code)\n    }\n    return headDelimiterValueBefore(code)\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1\n      seen = true\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterLeftAlignmentAfter\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      return headDelimiterFiller(code)\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return headDelimiterFiller\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true\n      effects.exit('tableDelimiterFiller')\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterRightAlignmentAfter\n    }\n    effects.exit('tableDelimiterFiller')\n    return headDelimiterRightAlignmentAfter(code)\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, 'whitespace')(code)\n    }\n    return headDelimiterCellAfter(code)\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code)\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow')\n      effects.exit('tableHead')\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code)\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow')\n    return bodyRowBreak(code)\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return bodyRowBreak\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow')\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, 'whitespace')(code)\n    }\n\n    // Anything else is cell content.\n    effects.enter('data')\n    return bodyRowData(code)\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return bodyRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? bodyRowEscape : bodyRowData\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return bodyRowData\n    }\n    return bodyRowData(code)\n  }\n}\n\n/** @type {Resolver} */\n// eslint-disable-next-line complexity\nfunction resolveTable(events, context) {\n  let index = -1\n  let inFirstCellAwaitingPipe = true\n  /** @type {RowKind} */\n  let rowKind = 0\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0]\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0]\n  let afterHeadAwaitingFirstBodyRow = false\n  let lastTableEnd = 0\n  /** @type {Token | undefined} */\n  let currentTable\n  /** @type {Token | undefined} */\n  let currentBody\n  /** @type {Token | undefined} */\n  let currentCell\n  const map = new EditMap()\n  while (++index < events.length) {\n    const event = events[index]\n    const token = event[1]\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n          currentBody = undefined\n          lastTableEnd = 0\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        }\n        map.add(index, 0, [['enter', currentTable, context]])\n      } else if (\n        token.type === 'tableRow' ||\n        token.type === 'tableDelimiterRow'\n      ) {\n        inFirstCellAwaitingPipe = true\n        currentCell = undefined\n        lastCell = [0, 0, 0, 0]\n        cell = [0, index + 1, 0, 0]\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          }\n          map.add(index, 0, [['enter', currentBody, context]])\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1\n      }\n      // Cell data.\n      else if (\n        rowKind &&\n        (token.type === 'data' ||\n          token.type === 'tableDelimiterMarker' ||\n          token.type === 'tableDelimiterFiller')\n      ) {\n        inFirstCellAwaitingPipe = false\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n            lastCell = [0, 0, 0, 0]\n          }\n          cell[2] = index\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n          }\n          lastCell = cell\n          cell = [lastCell[1], index, 0, 0]\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true\n      lastTableEnd = index\n    } else if (\n      token.type === 'tableRow' ||\n      token.type === 'tableDelimiterRow'\n    ) {\n      lastTableEnd = index\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1]\n        currentCell = flushCell(\n          map,\n          context,\n          lastCell,\n          rowKind,\n          index,\n          currentCell\n        )\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell)\n      }\n      rowKind = 0\n    } else if (\n      rowKind &&\n      (token.type === 'data' ||\n        token.type === 'tableDelimiterMarker' ||\n        token.type === 'tableDelimiterFiller')\n    ) {\n      cell[3] = index\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n  }\n  map.consume(context.events)\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1\n  while (++index < context.events.length) {\n    const event = context.events[index]\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index)\n    }\n  }\n  return events\n}\n\n/// Generate a cell.\n/**\n *\n * @param {EditMap} map\n * @param {TokenizeContext} context\n * @param {Range} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName =\n    rowKind === 1\n      ? 'tableHeader'\n      : rowKind === 2\n      ? 'tableDelimiter'\n      : 'tableData'\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent'\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]))\n    map.add(range[0], 0, [['exit', previousCell, context]])\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1])\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  }\n  map.add(range[1], 0, [['enter', previousCell, context]])\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2])\n    const relatedEnd = getPoint(context.events, range[3])\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    }\n    map.add(range[2], 0, [['enter', valueToken, context]])\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]]\n      const end = context.events[range[3]]\n      start[1].end = Object.assign({}, end[1].end)\n      start[1].type = 'chunkText'\n      start[1].contentType = 'text'\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1\n        const b = range[3] - range[2] - 1\n        map.add(a, b, [])\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]])\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd))\n    map.add(rowEnd, 0, [['exit', previousCell, context]])\n    previousCell = undefined\n  }\n  return previousCell\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {EditMap} map\n * @param {TokenizeContext} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = []\n  const related = getPoint(context.events, index)\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related)\n    exits.push(['exit', tableBody, context])\n  }\n  table.end = Object.assign({}, related)\n  exits.push(['exit', table, context])\n  map.add(index + 1, 0, exits)\n}\n\n/**\n * @param {Array<Event>} events\n * @param {number} index\n * @returns {readonly Point}\n */\nfunction getPoint(events, index) {\n  const event = events[index]\n  const side = event[0] === 'enter' ? 'start' : 'end'\n  return event[1][side]\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEndingOrSpace,\n  markdownLineEnding,\n  markdownSpace\n} from 'micromark-util-character'\nconst tasklistCheck = {\n  tokenize: tokenizeTasklistCheck\n}\n\n// To do: next major: expose function to make extension.\n\n/**\n * Extension for `micromark` that can be passed in `extensions`, to\n * enable GFM task list items syntax.\n *\n * @type {Extension}\n */\nexport const gfmTaskListItem = {\n  text: {\n    [91]: tasklistCheck\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this\n  return open\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n      // Exit if there’s stuff before.\n      self.previous !== null ||\n      // Exit if not in the first content that is the first child of a list\n      // item.\n      !self._gfmTasklistFirstContentOfListItem\n    ) {\n      return nok(code)\n    }\n    effects.enter('taskListCheck')\n    effects.enter('taskListCheckMarker')\n    effects.consume(code)\n    effects.exit('taskListCheckMarker')\n    return inside\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueUnchecked')\n      return close\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueChecked')\n      return close\n    }\n    return nok(code)\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker')\n      effects.consume(code)\n      effects.exit('taskListCheckMarker')\n      effects.exit('taskListCheck')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code)\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check(\n        {\n          tokenize: spaceThenNonSpace\n        },\n        ok,\n        nok\n      )(code)\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, 'whitespace')\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral,\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable,\n    gfmTaskListItem\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration.\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml,\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml,\n    gfmTableHtml,\n    gfmTagfilterHtml,\n    gfmTaskListItemHtml\n  ])\n}\n","/**\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Content | Root} Node\n * @typedef {Extract<Node, MdastParent>} Parent\n * @typedef {Exclude<Parent, Root>} ContentParent\n *\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[Root, ...Array<ContentParent>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | undefined | null}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {string | RegExp} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n * @typedef {Record<string, Replace>} FindAndReplaceSchema\n *   Several find and replaces, in object form.\n * @typedef {[Find, Replace]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n * @typedef {string | ReplaceFunction} Replace\n *   Thing to replace with.\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore.\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param tree\n *   Tree to change.\n * @param find\n *   Patterns to find.\n * @param replace\n *   Things to replace with (when `find` is `Find`) or configuration.\n * @param options\n *   Configuration (when `find` is not `Find`).\n * @returns\n *   Given, modified, tree.\n */\n// To do: next major: remove `find` & `replace` combo, remove schema.\nexport const findAndReplace =\n  /**\n   * @type {(\n   *   (<Tree extends Node>(tree: Tree, find: Find, replace?: Replace | null | undefined, options?: Options | null | undefined) => Tree) &\n   *   (<Tree extends Node>(tree: Tree, schema: FindAndReplaceSchema | FindAndReplaceList, options?: Options | null | undefined) => Tree)\n   * )}\n   **/\n  (\n    /**\n     * @template {Node} Tree\n     * @param {Tree} tree\n     * @param {Find | FindAndReplaceSchema | FindAndReplaceList} find\n     * @param {Replace | Options | null | undefined} [replace]\n     * @param {Options | null | undefined} [options]\n     * @returns {Tree}\n     */\n    function (tree, find, replace, options) {\n      /** @type {Options | null | undefined} */\n      let settings\n      /** @type {FindAndReplaceSchema|FindAndReplaceList} */\n      let schema\n\n      if (typeof find === 'string' || find instanceof RegExp) {\n        // @ts-expect-error don’t expect options twice.\n        schema = [[find, replace]]\n        settings = options\n      } else {\n        schema = find\n        // @ts-expect-error don’t expect replace twice.\n        settings = replace\n      }\n\n      if (!settings) {\n        settings = {}\n      }\n\n      const ignored = convert(settings.ignore || [])\n      const pairs = toPairs(schema)\n      let pairIndex = -1\n\n      while (++pairIndex < pairs.length) {\n        visitParents(tree, 'text', visitor)\n      }\n\n      // To do next major: don’t return the given tree.\n      return tree\n\n      /** @type {import('unist-util-visit-parents/complex-types.js').BuildVisitor<Root, 'text'>} */\n      function visitor(node, parents) {\n        let index = -1\n        /** @type {Parent | undefined} */\n        let grandparent\n\n        while (++index < parents.length) {\n          const parent = parents[index]\n\n          if (\n            ignored(\n              parent,\n              // @ts-expect-error: TS doesn’t understand but it’s perfect.\n              grandparent ? grandparent.children.indexOf(parent) : undefined,\n              grandparent\n            )\n          ) {\n            return\n          }\n\n          grandparent = parent\n        }\n\n        if (grandparent) {\n          return handler(node, parents)\n        }\n      }\n\n      /**\n       * Handle a text node which is not in an ignored parent.\n       *\n       * @param {Text} node\n       *   Text node.\n       * @param {Array<Parent>} parents\n       *   Parents.\n       * @returns {VisitorResult}\n       *   Result.\n       */\n      function handler(node, parents) {\n        const parent = parents[parents.length - 1]\n        const find = pairs[pairIndex][0]\n        const replace = pairs[pairIndex][1]\n        let start = 0\n        // @ts-expect-error: TS is wrong, some of these children can be text.\n        const index = parent.children.indexOf(node)\n        let change = false\n        /** @type {Array<PhrasingContent>} */\n        let nodes = []\n\n        find.lastIndex = 0\n\n        let match = find.exec(node.value)\n\n        while (match) {\n          const position = match.index\n          /** @type {RegExpMatchObject} */\n          const matchObject = {\n            index: match.index,\n            input: match.input,\n            // @ts-expect-error: stack is fine.\n            stack: [...parents, node]\n          }\n          let value = replace(...match, matchObject)\n\n          if (typeof value === 'string') {\n            value = value.length > 0 ? {type: 'text', value} : undefined\n          }\n\n          // It wasn’t a match after all.\n          if (value !== false) {\n            if (start !== position) {\n              nodes.push({\n                type: 'text',\n                value: node.value.slice(start, position)\n              })\n            }\n\n            if (Array.isArray(value)) {\n              nodes.push(...value)\n            } else if (value) {\n              nodes.push(value)\n            }\n\n            start = position + match[0].length\n            change = true\n          }\n\n          if (!find.global) {\n            break\n          }\n\n          match = find.exec(node.value)\n        }\n\n        if (change) {\n          if (start < node.value.length) {\n            nodes.push({type: 'text', value: node.value.slice(start)})\n          }\n\n          parent.children.splice(index, 1, ...nodes)\n        } else {\n          nodes = [node]\n        }\n\n        return index + nodes.length\n      }\n    }\n  )\n\n/**\n * Turn a schema into pairs.\n *\n * @param {FindAndReplaceSchema | FindAndReplaceList} schema\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(schema) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (typeof schema !== 'object') {\n    throw new TypeError('Expected array or object as schema')\n  }\n\n  if (Array.isArray(schema)) {\n    let index = -1\n\n    while (++index < schema.length) {\n      result.push([\n        toExpression(schema[index][0]),\n        toFunction(schema[index][1])\n      ])\n    }\n  } else {\n    /** @type {string} */\n    let key\n\n    for (key in schema) {\n      if (own.call(schema, key)) {\n        result.push([toExpression(key), toFunction(schema[key])])\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function' ? replace : () => replace\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n */\n\nimport {ccount} from 'ccount'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n// To do: next major: expose functions instead of extensions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM autolink literals.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmAutolinkLiteralFromMarkdown = {\n  transforms: [transformGfmAutolinkLiterals],\n  enter: {\n    literalAutolink: enterLiteralAutolink,\n    literalAutolinkEmail: enterLiteralAutolinkValue,\n    literalAutolinkHttp: enterLiteralAutolinkValue,\n    literalAutolinkWww: enterLiteralAutolinkValue\n  },\n  exit: {\n    literalAutolink: exitLiteralAutolink,\n    literalAutolinkEmail: exitLiteralAutolinkEmail,\n    literalAutolinkHttp: exitLiteralAutolinkHttp,\n    literalAutolinkWww: exitLiteralAutolinkWww\n  }\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmAutolinkLiteralToMarkdown = {\n  unsafe: [\n    {\n      character: '@',\n      before: '[+\\\\-.\\\\w]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {\n      character: '.',\n      before: '[Ww]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {character: ':', before: '[ps]', after: '\\\\/', inConstruct, notInConstruct}\n  ]\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = /** @type {Link} */ (this.stack[this.stack.length - 1])\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Link | Array<PhrasingContent> | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    (!email || code !== 47)\n  )\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n */\n\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {association} from 'mdast-util-to-markdown/lib/util/association.js'\nimport {containerFlow} from 'mdast-util-to-markdown/lib/util/container-flow.js'\nimport {indentLines} from 'mdast-util-to-markdown/lib/util/indent-lines.js'\nimport {safe} from 'mdast-util-to-markdown/lib/util/safe.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n// To do: next major: rename `context` -> `state`, `safeOptions` to `info`, use\n// utilities on `state`.\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteReference')\n  const subexit = context.enter('reference')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteDefinition')\n  const subexit = context.enter('label')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    indentLines(containerFlow(node, context, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: expose functions.\n// To do: next major: use `state`, state utilities.\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmStrikethroughFromMarkdown = {\n  canContainEols: ['delete'],\n  enter: {strikethrough: enterStrikethrough},\n  exit: {strikethrough: exitStrikethrough}\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmStrikethroughToMarkdown = {\n  unsafe: [\n    {\n      character: '~',\n      inConstruct: 'phrasing',\n      notInConstruct: constructsWithoutStrikethrough\n    }\n  ],\n  handlers: {delete: handleDelete}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  const exit = context.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += containerPhrasing(node, context, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","/**\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').InlineCode} InlineCode\n *\n * @typedef {import('markdown-table').MarkdownTableOptions} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Context} ToMarkdownContext\n * @typedef {import('mdast-util-to-markdown').SafeOptions} SafeOptions\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells.\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters.\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {inlineCode} from 'mdast-util-to-markdown/lib/handle/inline-code.js'\nimport {markdownTable} from 'markdown-table'\n\n// To do: next major: use `state` and `state` utilities from `mdast-util-to-markdown`.\n// To do: next major: use `defaultHandlers.inlineCode`.\n// To do: next major: expose functions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM tables.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTableFromMarkdown = {\n  enter: {\n    table: enterTable,\n    tableData: enterCell,\n    tableHeader: enterCell,\n    tableRow: enterRow\n  },\n  exit: {\n    codeText: exitCodeText,\n    table: exitTable,\n    tableData: exit,\n    tableHeader: exit,\n    tableRow: exit\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  /** @type {Array<'left' | 'right' | 'center' | 'none'>} */\n  // @ts-expect-error: `align` is custom.\n  const align = token._align\n  this.enter(\n    {\n      type: 'table',\n      align: align.map((d) => (d === 'none' ? null : d)),\n      children: []\n    },\n    token\n  )\n  this.setData('inTable', true)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.setData('inTable')\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.getData('inTable')) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = /** @type {InlineCode} */ (this.stack[this.stack.length - 1])\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      table: handleTable,\n      tableRow: handleTableRow,\n      tableCell: handleTableCell,\n      inlineCode: inlineCodeWithTable\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, context, safeOptions) {\n    return serializeData(\n      handleTableAsData(node, context, safeOptions),\n      node.align\n    )\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, context, safeOptions) {\n    const row = handleTableRowAsData(node, context, safeOptions)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, context, safeOptions) {\n    const exit = context.enter('tableCell')\n    const subexit = context.enter('phrasing')\n    const value = containerPhrasing(node, context, {\n      ...safeOptions,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = context.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(\n        children[index],\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableRowAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = context.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(\n        children[index],\n        node,\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, context) {\n    let value = inlineCode(node, parent, context)\n\n    if (context.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\n/**\n * @typedef {Extract<Root | Content, Parent>} Parents\n */\n\nimport {listItem} from 'mdast-util-to-markdown/lib/handle/list-item.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: rename `context` -> `state`, `safeOptions` -> `info`, use\n// `track` from `state`.\n// To do: next major: replace exports with functions.\n// To do: next major: use `defaulthandlers.listItem`.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM task list items.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTaskListItemFromMarkdown = {\n  exit: {\n    taskListCheckValueChecked: exitCheck,\n    taskListCheckValueUnchecked: exitCheck,\n    paragraph: exitParagraphWithTaskListItem\n  }\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM task list items.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmTaskListItemToMarkdown = {\n  unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n  handlers: {listItem: listItemWithTaskListItem}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  const node = /** @type {ListItem} */ (this.stack[this.stack.length - 2])\n  // We’re always in a paragraph, in a list item.\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = /** @type {Parents} */ (this.stack[this.stack.length - 2])\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = /** @type {Paragraph} */ (this.stack[this.stack.length - 1])\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, context, safeOptions) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = track(safeOptions)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = listItem(node, parent, context, {\n    ...safeOptions,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * @typedef {import('mdast-util-gfm-table').Options} Options\n *   Configuration.\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown,\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown,\n    gfmTableFromMarkdown,\n    gfmTaskListItemFromMarkdown\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown,\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown,\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown\n    ]\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('micromark-extension-gfm').Options & import('mdast-util-gfm').Options} Options\n */\n\nimport {gfm} from 'micromark-extension-gfm'\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\n\n/**\n * Plugin to support GFM (autolink literals, footnotes, strikethrough, tables, tasklists).\n *\n * @type {import('unified').Plugin<[Options?]|void[], Root>}\n */\nexport default function remarkGfm(options = {}) {\n  const data = this.data()\n\n  add('micromarkExtensions', gfm(options))\n  add('fromMarkdownExtensions', gfmFromMarkdown())\n  add('toMarkdownExtensions', gfmToMarkdown(options))\n\n  /**\n   * @param {string} field\n   * @param {unknown} value\n   */\n  function add(field, value) {\n    const list = /** @type {unknown[]} */ (\n      // Other extensions\n      /* c8 ignore next 2 */\n      data[field] ? data[field] : (data[field] = [])\n    )\n\n    list.push(value)\n  }\n}\n"],"names":["wwwPrefix","tokenize","effects","ok","nok","size","wwwPrefixInside","code","consume","wwwPrefixAfter","partial","domain","underscoreInLastSegment","underscoreInLastLastSegment","seen","domainInside","check","trail","domainAfter","domainAtPunctuation","markdownLineEndingOrSpace","unicodeWhitespace","unicodePunctuation","undefined","path","sizeOpen","sizeClose","pathInside","pathAtPunctuation","trailCharRefStart","trailBracketAfter","asciiAlpha","trailCharRefInside","emailDomainDotTrail","after","asciiAlphanumeric","wwwAutolink","self","this","previousWww","call","previous","previousUnbalanced","events","enter","attempt","wwwAfter","exit","protocolAutolink","buffer","previousProtocol","String","fromCodePoint","protocolPrefixInside","length","protocol","toLowerCase","protocolSlashesInside","afterProtocol","asciiControl","protocolAfter","emailAutolink","dot","data","gfmAtext","previousEmail","atext","emailDomain","emailDomainAfter","emailDomainDot","text","gfmAutolinkLiteral","index","result","token","type","_balanced","_gfmAutolinkLiteralWalkedInto","indent","factorySpace","tail","sliceSerialize","tokenizePotentialGfmFootnoteCall","defined","parser","gfmFootnotes","labelStart","id","normalizeIdentifier","start","end","now","codePointAt","includes","slice","resolveToPotentialGfmFootnoteCall","context","Object","assign","marker","column","offset","_bufferIndex","string","chunk","contentType","replacement","splice","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","identifier","_container","labelAtMarker","labelInside","labelAfter","labelEscape","push","whitespaceAfter","tokenizeDefinitionContinuation","blankLine","gfmFootnoteDefinitionEnd","gfmStrikethrough","options","single","singleTilde","tokenizer","more","before","classifyCharacter","_open","Boolean","_close","resolveAll","open","strikethrough","nextEvents","insideSpan","constructs","null","attentionMarkers","EditMap","constructor","map","add","remove","editMap","at","addImpl","sort","a","b","vecs","pop","gfmTableAlign","inDelimiterRow","align","event","alignIndex","gfmTable","flow","sizeB","next","bodyRowStart","headRowBefore","lazy","line","headRowBreak","headRowStart","markdownLineEnding","interrupt","headDelimiterStart","markdownSpace","headRowData","headRowEscape","headDelimiterBefore","disable","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","currentTable","currentBody","currentCell","inFirstCellAwaitingPipe","rowKind","lastCell","cell","afterHeadAwaitingFirstBodyRow","lastTableEnd","flushTableEnd","flushCell","_align","range","rowEnd","previousCell","groupName","getPoint","relatedStart","relatedEnd","valueToken","table","tableBody","exits","related","side","tasklistCheck","_gfmTasklistFirstContentOfListItem","inside","close","spaceThenNonSpace","gfmTaskListItem","gfm","combineExtensions","document","continuation","resolveTo","own","hasOwnProperty","findAndReplace","tree","find","replace","settings","schema","RegExp","ignored","convert","ignore","pairs","TypeError","Array","isArray","toExpression","toFunction","key","toPairs","pairIndex","visitParents","visitor","node","parents","grandparent","parent","children","indexOf","change","nodes","lastIndex","match","exec","value","position","matchObject","input","stack","global","handler","escape","inConstruct","notInConstruct","gfmAutolinkLiteralFromMarkdown","transforms","findUrl","findEmail","literalAutolink","title","url","literalAutolinkEmail","enterLiteralAutolinkValue","literalAutolinkHttp","literalAutolinkWww","config","autolinkEmail","autolinkProtocol","gfmAutolinkLiteralToMarkdown","unsafe","character","_","prefix","test","parts","split","isCorrectDomain","trailExec","closingParenIndex","openingParens","ccount","closingParens","splitUrl","label","email","charCodeAt","enterFootnoteDefinition","enterFootnoteDefinitionLabelString","exitFootnoteDefinitionLabelString","resume","exitFootnoteDefinition","enterFootnoteCall","enterFootnoteCallString","exitFootnoteCallString","exitFootnoteCall","footnoteReference","safeOptions","tracker","track","move","subexit","safe","association","current","footnoteDefinition","shift","indentLines","containerFlow","blank","peek","handleDelete","gfmStrikethroughFromMarkdown","canContainEols","gfmStrikethroughToMarkdown","handlers","delete","containerPhrasing","gfmTableFromMarkdown","d","setData","tableData","enterCell","tableHeader","tableRow","codeText","getData","$0","$1","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","atBreak","serializeData","handleTableRowAsData","handleTableAsData","tableCell","handleTableCell","inlineCode","matrix","markdownTable","gfmTaskListItemFromMarkdown","taskListCheckValueChecked","exitCheck","taskListCheckValueUnchecked","paragraph","checked","head","siblings","firstParaghraph","sibling","gfmTaskListItemToMarkdown","listItem","checkable","checkbox","gfmFromMarkdown","gfmFootnoteDefinition","gfmFootnoteDefinitionLabelString","gfmFootnoteCall","gfmFootnoteCallString","gfmToMarkdown","extensions","remarkGfm","arguments","field"],"sourceRoot":""}